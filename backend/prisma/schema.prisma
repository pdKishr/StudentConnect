// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
    //basic mandatory information
    id               String   @id @default(uuid())
    name             String? 
    email            String   @unique
    password         String
    mobile_number    String   @unique

    //other personal details
    language         String[]
    city             String?
    state            String?
    country          String?
    profilePicture   String?

    // socials & education
    linkedin         String?
    resume           String?
    highestDegree    String?
    course           String?
    college          String?

    //app specific
    timezone            String?
    isActive            Boolean  @default(true)
    completePercentage  Int      @default(0)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt  
    booking             Booking[]
}

model Mentor{
    
    id               String   @id @default(uuid())
    password         String
    email            String   @unique  
    mobile_number    String   @unique
    
    profilePicture   String?

    name             String?  
    linkedin         String?
    about            String?   
    language         String[]
    skill            String[]
    domain           String? 
    currentlyWorking Boolean  @default(true)
    yearsofExperience Int?  
      
    city             String?
    state            String?
    country          String?
    timezone         String @default("Asia/Kolkata")
   
    education        Education[]
    workExperience   WorkExperience[]     
    availability     Availability[]
    booking          Booking[] 
    service          Service[]
    slot             Slot[]
    menteesCount     Int  @default(0) 
    menteeMinutes    Int  @default(0)
   
    //app specific
   
    isActive         Boolean  @default(true)
    verified         Boolean  @default(false)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

model Availability{
    id          String @id @default(uuid())
    mentorId    String   
    mentor      Mentor  @relation(fields:[mentorId],references: [id], onDelete: Cascade)
    isAvailable Boolean
    day         Int  // 0 for sunday, 1 for monday.....6 for saturday
    startTime   String
    endTime     String
}

model Education{
    id        String  @id @default(cuid())
    mentorId  String  
    mentor    Mentor  @relation(fields:[mentorId],references: [id], onDelete: Cascade)
    college   String
    degree    String
    course    String
    startYear String
    endYear   String
}

model WorkExperience{
      id          String  @id @default(cuid())
      mentorId    String 
      mentor      Mentor  @relation(fields:[mentorId],references: [id], onDelete: Cascade)
      company     String
      role        String
      startYear   String
      endYear     String    
}

model Service{
     id          String @id @default(uuid())
     mentorId    String   
     mentor      Mentor  @relation(fields:[mentorId],references: [id], onDelete: Cascade)
     name        String
     price       Int
     description String?
     booking     Booking[] 
}

model Slot{
     id          String @id @default(uuid())
     mentorId    String   
     mentor      Mentor  @relation(fields:[mentorId],references: [id], onDelete: Cascade)
     startTime   DateTime
     endTime     DateTime
     booking     Booking[]
     isBooked    Boolean @default(false)
}

model  Booking{
     id            String @id @default(uuid())
     userId        String
     user          User   @relation(fields:[userId] ,references: [id])
     mentorId      String
     mentor        Mentor @relation(fields:[mentorId],references: [id])
     serviceId     String 
     service       Service @relation(fields:[serviceId], references:[id])
     slotId        String 
     slot          Slot @relation(fields:[slotId], references:[id])
     status        Status  @default(upcoming)
     createdAt     DateTime @default(now())
     updatedAt     DateTime @updatedAt
}

enum Status{
    upcoming 
    cancelled
    completed
}

model Admin{
    id           String   @id @default(uuid())
    email        String   @unique
    password     String   
}